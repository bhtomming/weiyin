<?php

namespace AppBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\AttributeOverrides;
use Doctrine\ORM\Mapping\AttributeOverride;
use Doctrine\ORM\Mapping\Column;
use FOS\UserBundle\Model\User as FOSUser;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;


/**
 *  User
 * @AttributeOverrides({
 *      @AttributeOverride(name="email",
 *          column=@Column(
 *              name = "email",
 *              nullable = true,
 *          )
 *      ),
 *     @AttributeOverride(name="emailCanonical",
 *         column=@Column(
 *              name = "emailCanonical",
 *              nullable = true,
 *          )
 *     )
 * })
 * @ORM\Table(name="user")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 * @UniqueEntity("username",message="该用户名已经有人使用,请重新输入!")
 * @UniqueEntity(fields="phone",message="手机号码已被使用,请重新输入!")
 */
class User extends FOSUser
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     *  @Assert\Regex(
     *     pattern="/\ |\/|\~|\!|\@|\#|\\$|\%|\^|\&|\*|\(|\)|\+|\{|\}|\:|\<|\>|\?|\[|\]|\,|\.|\/|\;|\'|\`|\-|\=|\\\|\|/",
     *     match=false,
     *     message="用户名由2-20个字母、数字、中文、下划线等组成，不能包含特殊字符串及空格",
     *     groups={"Registrations","Default"}
     * )
     * @Assert\Length(min="2",max="20",minMessage="用户名长度至少2个字符串",maxMessage="用户名最大长度为20个字符串")
     */
    protected $username;

    /**
     * @var string
     *
     * @ORM\Column(name="sex", type="string", nullable=true, length=2)
     */
    private $sex;

    /**
     * @var string
     *
     *@Assert\Regex(
     *     pattern="/^((0\d{2,3}-\d{7,8})|(1[34578]\d{9}))$/",
     *     match=true,
     *     message="电话/手机号码不正确!",
     *     groups={"Registrations","Default"}
     * )
     * @Assert\NotBlank(message="手机号码不能为空!",groups={"Registrations","Default"})
     *
     * @ORM\Column(name="phone", type="string", length=20, unique=true)
     *
     */
    private $phone;

    /**
     * @var Address[] | ArrayCollection
     *
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Address",cascade={"persist","remove"})
     * @ORM\JoinTable(name="user_address")
     */
    private $address;

    /**
     * @var Date
     * @ORM\Column(name="birthday", nullable=true, type="date")
     */
    private $birthday;

    /**
     * @var User[] | ArrayCollection
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\User",inversedBy="users",cascade={"persist"})
     * @ORM\JoinTable(name="user_friends")
     */
    private $friends;

    /**
     * @var Shape[] | ArrayCollection
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Shape", cascade={"persist","remove"})
     * @ORM\JoinTable(name="user_shape")
     */
    private $shape;

    /**
     * @var string
     * @ORM\Column(name="company_name",type="string",length=255,nullable=true)
     */
    private $companyName;


    /**
     * Set sex
     *
     * @param boolean $sex
     *
     * @return User
     */
    public function setSex($sex)
    {
        $this->sex = $sex;

        return $this;
    }

    /**
     * Get sex
     *
     * @return string
     */
    public function getSex()
    {
        return $this->sex;
    }

    /**
     * Set phone
     *
     * @param string $phone
     *
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set address
     *
     * @param Address $address
     *
     * @return User
     */
    public function setAddress($address)
    {
        $address->setUser($this);
        $this->addAddress($address);

        return $this;
    }

    /**
     * Get address
     *
     * @return Address[] | ArrayCollection
     */
    public function getAddress()
    {
        return $this->address;
    }

    public function addAddress(Address $address){
        if($this->address->contains($address)){
            return $this;
        }
        $this->address[] = $address;
        return $this;
    }

    public function removeAddress($address){
        if(!$this->address->contains($address)){
            return $this;
        }
        $this->address->remove($address);
        return $this;
    }


    public function setRole($roles)
    {
        if(!is_array($roles)){
            $roles = array($roles);
        }
        parent::setRoles($roles); // TODO: Change the autogenerated stub
    }

    public function getRole()
    {
        $roles =  parent::getRoles();

        return reset($roles);
    }




    public function setBirthday($birthday){
        if(null == $birthday || !($birthday instanceof \DateTime)){
            return $this;
        }
        $this->birthday = $birthday;
        return $this;
    }

    public function getBirthday(){
        return $this->birthday;
    }

    public function __construct(){
        $this->friends = new ArrayCollection();
        $this->shape = new ArrayCollection();
        $this->address = new ArrayCollection();
        parent::__construct();
    }

    public function addFriends(User $friend){
        if($this->friends->contains($friend)){
            return $this;
        }
        $this->friends[] = $friend;
        return $this;
    }

    public function removeFriends(User $friend){
        $this->friends->remove($friend);
        return $this;
    }

    public function setFriends(User $friend){
        $this->addFriends($friend);
        return $this;
    }

    public function getFriends(){
        return $this->friends;
    }

    public function addShape(Shape $shape){
        if($this->shape->contains($shape)){
            return $this;
        }
        $this->shape[] = $shape;
        return $this;
    }

    public function setShape(Shape $shape){
        $this->addShape($shape);
        return $this;
    }

    public function getShape(){
        return $this->shape;
    }

    public function setDefaultAddress(Address $address){
        foreach ($this->address as $addr){
            if($addr != $address){
                $addr->setIsDefault(false);
            }
        }
    }

    public function getDefaultAddress(){
        foreach ($this->address as $addr){
            if($addr->getIsDefault()){
                return $addr;
            }
        }
        return $this->address->last();
    }

    public function getNewShape(){
        return $this->shape->last();
    }

    public function setCompanyName($companyName){
        $this->companyName = $companyName;
        return $this;
    }

    public function getCompanyName(){
        return $this->companyName;
    }



}

